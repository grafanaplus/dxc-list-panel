{"version":3,"sources":["../src/list_ctrl.js"],"names":["PanelCtrl","_","panelDefaults","IS_ROW","cards","color","type","title","items","ListCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","addEditorTab","$timeout","cancel","nextTickPromise","push","value","card","without","index","item","scope","elem","$panelContainer","find","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;AACDC,O;;;;;;;;;;;;;;;;;;;;;AAGDC,mB,GAAgB;AACpBC,gBAAQ,KADY;AAEpBC,eAAO,CACL;AACEC,iBAAO,kBADT;AAEEC,gBAAM,SAFR;AAGEC,iBAAO,MAHT;AAIEC,iBAAO;AAJT,SADK;AAFa,O;;0BAYTC,Q;;;AACX,0BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,0HACvBD,MADuB,EACfC,SADe;;AAE7BV,YAAEW,YAAF,CAAe,MAAKC,KAApB,EAA2BX,aAA3B;;AAEA,gBAAKY,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;;AAN6B;AAQ9B;;;;2CAEgB;AACf,iBAAKG,YAAL,CAAkB,SAAlB,EAA6B,+CAA7B,EAA8E,CAA9E;AACD;;;4CAEiB;AAChB,iBAAKC,QAAL,CAAcC,MAAd,CAAqB,KAAKC,eAA1B;AACD;;;oCAES;AACR,iBAAKV,KAAL,CAAWT,KAAX,CAAiBoB,IAAjB,CAAsB;AACpBnB,qBAAO,kBADa;AAEpBE,qBAAO,MAFa;AAGpBC,qBAAO,CACL,EAACiB,OAAM,aAAP,EADK,EAEL,EAACA,OAAM,WAAP,EAFK,EAGL,EAACA,OAAM,mBAAP,EAHK;AAHa,aAAtB;AASD;;;qCAEUC,I,EAAM;AACf,iBAAKb,KAAL,CAAWT,KAAX,GAAmBH,EAAE0B,OAAF,CAAU,KAAKd,KAAL,CAAWT,KAArB,EAA4BsB,IAA5B,CAAnB;AACD;;;kCAEOE,K,EAAO;AACb,iBAAKf,KAAL,CAAWT,KAAX,CAAiBwB,KAAjB,EAAwBpB,KAAxB,CAA8BgB,IAA9B,CAAmC,EAACC,OAAM,EAAP,EAAnC;AACD;;;qCAEUG,K,EAAMC,I,EAAM;AACrB,iBAAKhB,KAAL,CAAWT,KAAX,CAAiBwB,KAAjB,EAAwBpB,KAAxB,GAAgCP,EAAE0B,OAAF,CAAU,KAAKd,KAAL,CAAWT,KAAX,CAAiBwB,KAAjB,EAAwBpB,KAAlC,EAAyCqB,IAAzC,CAAhC;AACD;;;+BAEIC,K,EAAOC,I,EAAM;AAChB,iBAAKjB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMiB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;AACD,aAFD;AAGD;;;;QA/C2BjC,S;;;;AAkD9BS,eAASyB,WAAT,GAAuB,aAAvB","file":"list_ctrl.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/list-panel.css!';\n\nconst panelDefaults = {\n  IS_ROW: false,\n  cards: [\n    {\n      color: 'rgb(126,117,222)',\n      type: 'decimal',\n      title: 'PLAN',\n      items: []\n    }\n  ]\n};\n\nexport class ListCtrl extends PanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-list-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  addCard() {\n    this.panel.cards.push({\n      color: 'rgb(126,117,222)',\n      title: 'PLAN',\n      items: [\n        {value:'Have a meal'},\n        {value:'Go to bed'},\n        {value:'Back to the first'}\n      ]\n    });\n  }\n\n  removeCard(card) {\n    this.panel.cards = _.without(this.panel.cards, card);\n  }\n\n  addItem(index) {\n    this.panel.cards[index].items.push({value:''});\n  }\n\n  removeItem(index,item) {\n    this.panel.cards[index].items = _.without(this.panel.cards[index].items, item);\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n    });\n  }\n}\n\nListCtrl.templateUrl = 'module.html';\n"]}